#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Administrare_firma
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Company")]
	public partial class CompanyDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertWorkFromHome(WorkFromHome instance);
    partial void UpdateWorkFromHome(WorkFromHome instance);
    partial void DeleteWorkFromHome(WorkFromHome instance);
    partial void InsertAbsence(Absence instance);
    partial void UpdateAbsence(Absence instance);
    partial void DeleteAbsence(Absence instance);
    partial void InsertBonus(Bonus instance);
    partial void UpdateBonus(Bonus instance);
    partial void DeleteBonus(Bonus instance);
    partial void InsertBussinessTrip(BussinessTrip instance);
    partial void UpdateBussinessTrip(BussinessTrip instance);
    partial void DeleteBussinessTrip(BussinessTrip instance);
    partial void InsertClocking(Clocking instance);
    partial void UpdateClocking(Clocking instance);
    partial void DeleteClocking(Clocking instance);
    partial void InsertDays_Off(Days_Off instance);
    partial void UpdateDays_Off(Days_Off instance);
    partial void DeleteDays_Off(Days_Off instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertEvaluation(Evaluation instance);
    partial void UpdateEvaluation(Evaluation instance);
    partial void DeleteEvaluation(Evaluation instance);
    partial void InsertPost(Post instance);
    partial void UpdatePost(Post instance);
    partial void DeletePost(Post instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertTraining(Training instance);
    partial void UpdateTraining(Training instance);
    partial void DeleteTraining(Training instance);
    partial void InsertTraining_assignment(Training_assignment instance);
    partial void UpdateTraining_assignment(Training_assignment instance);
    partial void DeleteTraining_assignment(Training_assignment instance);
    partial void InsertUser_employee(User_employee instance);
    partial void UpdateUser_employee(User_employee instance);
    partial void DeleteUser_employee(User_employee instance);
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    #endregion
		
		public CompanyDataContext() : 
				base(global::Administrare_firma.Properties.Settings.Default.CompanyConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CompanyDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CompanyDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CompanyDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CompanyDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<WorkFromHome> WorkFromHomes
		{
			get
			{
				return this.GetTable<WorkFromHome>();
			}
		}
		
		public System.Data.Linq.Table<Absence> Absences
		{
			get
			{
				return this.GetTable<Absence>();
			}
		}
		
		public System.Data.Linq.Table<Bonus> Bonus
		{
			get
			{
				return this.GetTable<Bonus>();
			}
		}
		
		public System.Data.Linq.Table<BussinessTrip> BussinessTrips
		{
			get
			{
				return this.GetTable<BussinessTrip>();
			}
		}
		
		public System.Data.Linq.Table<Clocking> Clockings
		{
			get
			{
				return this.GetTable<Clocking>();
			}
		}
		
		public System.Data.Linq.Table<Days_Off> Days_Offs
		{
			get
			{
				return this.GetTable<Days_Off>();
			}
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<Evaluation> Evaluations
		{
			get
			{
				return this.GetTable<Evaluation>();
			}
		}
		
		public System.Data.Linq.Table<Post> Posts
		{
			get
			{
				return this.GetTable<Post>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Training> Trainings
		{
			get
			{
				return this.GetTable<Training>();
			}
		}
		
		public System.Data.Linq.Table<Training_assignment> Training_assignments
		{
			get
			{
				return this.GetTable<Training_assignment>();
			}
		}
		
		public System.Data.Linq.Table<User_employee> User_employees
		{
			get
			{
				return this.GetTable<User_employee>();
			}
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkFromHome")]
	public partial class WorkFromHome : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _ID_employee;
		
		private string _Location;
		
		private string _Work_platform;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnID_employeeChanging(System.Nullable<int> value);
    partial void OnID_employeeChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnWork_platformChanging(string value);
    partial void OnWork_platformChanged();
    #endregion
		
		public WorkFromHome()
		{
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_employee", DbType="Int")]
		public System.Nullable<int> ID_employee
		{
			get
			{
				return this._ID_employee;
			}
			set
			{
				if ((this._ID_employee != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_employeeChanging(value);
					this.SendPropertyChanging();
					this._ID_employee = value;
					this.SendPropertyChanged("ID_employee");
					this.OnID_employeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="VarChar(100)")]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Work_platform", DbType="VarChar(50)")]
		public string Work_platform
		{
			get
			{
				return this._Work_platform;
			}
			set
			{
				if ((this._Work_platform != value))
				{
					this.OnWork_platformChanging(value);
					this.SendPropertyChanging();
					this._Work_platform = value;
					this.SendPropertyChanged("Work_platform");
					this.OnWork_platformChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_WorkFromHome", Storage="_Employee", ThisKey="ID_employee", OtherKey="ID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.WorkFromHomes.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.WorkFromHomes.Add(this);
						this._ID_employee = value.ID;
					}
					else
					{
						this._ID_employee = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Absence")]
	public partial class Absence : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _ID_employee;
		
		private System.Nullable<System.DateTime> _Date_of_absence;
		
		private System.Nullable<System.TimeSpan> _Start_hour;
		
		private System.Nullable<System.TimeSpan> _End_hour;
		
		private string _Description;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnID_employeeChanging(System.Nullable<int> value);
    partial void OnID_employeeChanged();
    partial void OnDate_of_absenceChanging(System.Nullable<System.DateTime> value);
    partial void OnDate_of_absenceChanged();
    partial void OnStart_hourChanging(System.Nullable<System.TimeSpan> value);
    partial void OnStart_hourChanged();
    partial void OnEnd_hourChanging(System.Nullable<System.TimeSpan> value);
    partial void OnEnd_hourChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Absence()
		{
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_employee", DbType="Int")]
		public System.Nullable<int> ID_employee
		{
			get
			{
				return this._ID_employee;
			}
			set
			{
				if ((this._ID_employee != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_employeeChanging(value);
					this.SendPropertyChanging();
					this._ID_employee = value;
					this.SendPropertyChanged("ID_employee");
					this.OnID_employeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date_of_absence", DbType="Date")]
		public System.Nullable<System.DateTime> Date_of_absence
		{
			get
			{
				return this._Date_of_absence;
			}
			set
			{
				if ((this._Date_of_absence != value))
				{
					this.OnDate_of_absenceChanging(value);
					this.SendPropertyChanging();
					this._Date_of_absence = value;
					this.SendPropertyChanged("Date_of_absence");
					this.OnDate_of_absenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Start_hour", DbType="Time")]
		public System.Nullable<System.TimeSpan> Start_hour
		{
			get
			{
				return this._Start_hour;
			}
			set
			{
				if ((this._Start_hour != value))
				{
					this.OnStart_hourChanging(value);
					this.SendPropertyChanging();
					this._Start_hour = value;
					this.SendPropertyChanged("Start_hour");
					this.OnStart_hourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_End_hour", DbType="Time")]
		public System.Nullable<System.TimeSpan> End_hour
		{
			get
			{
				return this._End_hour;
			}
			set
			{
				if ((this._End_hour != value))
				{
					this.OnEnd_hourChanging(value);
					this.SendPropertyChanging();
					this._End_hour = value;
					this.SendPropertyChanged("End_hour");
					this.OnEnd_hourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Absence", Storage="_Employee", ThisKey="ID_employee", OtherKey="ID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Absences.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Absences.Add(this);
						this._ID_employee = value.ID;
					}
					else
					{
						this._ID_employee = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bonus")]
	public partial class Bonus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _ID_employee;
		
		private string _Name;
		
		private string _Description;
		
		private System.Nullable<int> _Value;
		
		private string _Necessary_conditions;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnID_employeeChanging(System.Nullable<int> value);
    partial void OnID_employeeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnValueChanging(System.Nullable<int> value);
    partial void OnValueChanged();
    partial void OnNecessary_conditionsChanging(string value);
    partial void OnNecessary_conditionsChanged();
    #endregion
		
		public Bonus()
		{
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_employee", DbType="Int")]
		public System.Nullable<int> ID_employee
		{
			get
			{
				return this._ID_employee;
			}
			set
			{
				if ((this._ID_employee != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_employeeChanging(value);
					this.SendPropertyChanging();
					this._ID_employee = value;
					this.SendPropertyChanged("ID_employee");
					this.OnID_employeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Int")]
		public System.Nullable<int> Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Necessary_conditions", DbType="VarChar(300)")]
		public string Necessary_conditions
		{
			get
			{
				return this._Necessary_conditions;
			}
			set
			{
				if ((this._Necessary_conditions != value))
				{
					this.OnNecessary_conditionsChanging(value);
					this.SendPropertyChanging();
					this._Necessary_conditions = value;
					this.SendPropertyChanged("Necessary_conditions");
					this.OnNecessary_conditionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Bonus", Storage="_Employee", ThisKey="ID_employee", OtherKey="ID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Bonus.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Bonus.Add(this);
						this._ID_employee = value.ID;
					}
					else
					{
						this._ID_employee = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BussinessTrip")]
	public partial class BussinessTrip : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _ID_employee;
		
		private System.Nullable<System.DateTime> _Start_date;
		
		private System.Nullable<System.DateTime> _End_date;
		
		private System.Nullable<int> _Anticipated_expenses;
		
		private System.Nullable<int> _Buget;
		
		private string _Importance;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnID_employeeChanging(System.Nullable<int> value);
    partial void OnID_employeeChanged();
    partial void OnStart_dateChanging(System.Nullable<System.DateTime> value);
    partial void OnStart_dateChanged();
    partial void OnEnd_dateChanging(System.Nullable<System.DateTime> value);
    partial void OnEnd_dateChanged();
    partial void OnAnticipated_expensesChanging(System.Nullable<int> value);
    partial void OnAnticipated_expensesChanged();
    partial void OnBugetChanging(System.Nullable<int> value);
    partial void OnBugetChanged();
    partial void OnImportanceChanging(string value);
    partial void OnImportanceChanged();
    #endregion
		
		public BussinessTrip()
		{
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_employee", DbType="Int")]
		public System.Nullable<int> ID_employee
		{
			get
			{
				return this._ID_employee;
			}
			set
			{
				if ((this._ID_employee != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_employeeChanging(value);
					this.SendPropertyChanging();
					this._ID_employee = value;
					this.SendPropertyChanged("ID_employee");
					this.OnID_employeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Start_date", DbType="Date")]
		public System.Nullable<System.DateTime> Start_date
		{
			get
			{
				return this._Start_date;
			}
			set
			{
				if ((this._Start_date != value))
				{
					this.OnStart_dateChanging(value);
					this.SendPropertyChanging();
					this._Start_date = value;
					this.SendPropertyChanged("Start_date");
					this.OnStart_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_End_date", DbType="Date")]
		public System.Nullable<System.DateTime> End_date
		{
			get
			{
				return this._End_date;
			}
			set
			{
				if ((this._End_date != value))
				{
					this.OnEnd_dateChanging(value);
					this.SendPropertyChanging();
					this._End_date = value;
					this.SendPropertyChanged("End_date");
					this.OnEnd_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Anticipated_expenses", DbType="Int")]
		public System.Nullable<int> Anticipated_expenses
		{
			get
			{
				return this._Anticipated_expenses;
			}
			set
			{
				if ((this._Anticipated_expenses != value))
				{
					this.OnAnticipated_expensesChanging(value);
					this.SendPropertyChanging();
					this._Anticipated_expenses = value;
					this.SendPropertyChanged("Anticipated_expenses");
					this.OnAnticipated_expensesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Buget", DbType="Int")]
		public System.Nullable<int> Buget
		{
			get
			{
				return this._Buget;
			}
			set
			{
				if ((this._Buget != value))
				{
					this.OnBugetChanging(value);
					this.SendPropertyChanging();
					this._Buget = value;
					this.SendPropertyChanged("Buget");
					this.OnBugetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Importance", DbType="VarChar(15)")]
		public string Importance
		{
			get
			{
				return this._Importance;
			}
			set
			{
				if ((this._Importance != value))
				{
					this.OnImportanceChanging(value);
					this.SendPropertyChanging();
					this._Importance = value;
					this.SendPropertyChanged("Importance");
					this.OnImportanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_BussinessTrip", Storage="_Employee", ThisKey="ID_employee", OtherKey="ID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.BussinessTrips.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.BussinessTrips.Add(this);
						this._ID_employee = value.ID;
					}
					else
					{
						this._ID_employee = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Clocking")]
	public partial class Clocking : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_clocking;
		
		private System.Nullable<int> _ID_employee;
		
		private System.Nullable<System.DateTime> _Date_of_clocking;
		
		private System.Nullable<System.TimeSpan> _Start_hour;
		
		private System.Nullable<System.TimeSpan> _End_hour;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_clockingChanging(int value);
    partial void OnID_clockingChanged();
    partial void OnID_employeeChanging(System.Nullable<int> value);
    partial void OnID_employeeChanged();
    partial void OnDate_of_clockingChanging(System.Nullable<System.DateTime> value);
    partial void OnDate_of_clockingChanged();
    partial void OnStart_hourChanging(System.Nullable<System.TimeSpan> value);
    partial void OnStart_hourChanged();
    partial void OnEnd_hourChanging(System.Nullable<System.TimeSpan> value);
    partial void OnEnd_hourChanged();
    #endregion
		
		public Clocking()
		{
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_clocking", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_clocking
		{
			get
			{
				return this._ID_clocking;
			}
			set
			{
				if ((this._ID_clocking != value))
				{
					this.OnID_clockingChanging(value);
					this.SendPropertyChanging();
					this._ID_clocking = value;
					this.SendPropertyChanged("ID_clocking");
					this.OnID_clockingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_employee", DbType="Int")]
		public System.Nullable<int> ID_employee
		{
			get
			{
				return this._ID_employee;
			}
			set
			{
				if ((this._ID_employee != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_employeeChanging(value);
					this.SendPropertyChanging();
					this._ID_employee = value;
					this.SendPropertyChanged("ID_employee");
					this.OnID_employeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date_of_clocking", DbType="Date")]
		public System.Nullable<System.DateTime> Date_of_clocking
		{
			get
			{
				return this._Date_of_clocking;
			}
			set
			{
				if ((this._Date_of_clocking != value))
				{
					this.OnDate_of_clockingChanging(value);
					this.SendPropertyChanging();
					this._Date_of_clocking = value;
					this.SendPropertyChanged("Date_of_clocking");
					this.OnDate_of_clockingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Start_hour", DbType="Time")]
		public System.Nullable<System.TimeSpan> Start_hour
		{
			get
			{
				return this._Start_hour;
			}
			set
			{
				if ((this._Start_hour != value))
				{
					this.OnStart_hourChanging(value);
					this.SendPropertyChanging();
					this._Start_hour = value;
					this.SendPropertyChanged("Start_hour");
					this.OnStart_hourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_End_hour", DbType="Time")]
		public System.Nullable<System.TimeSpan> End_hour
		{
			get
			{
				return this._End_hour;
			}
			set
			{
				if ((this._End_hour != value))
				{
					this.OnEnd_hourChanging(value);
					this.SendPropertyChanging();
					this._End_hour = value;
					this.SendPropertyChanged("End_hour");
					this.OnEnd_hourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Clocking", Storage="_Employee", ThisKey="ID_employee", OtherKey="ID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Clockings.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Clockings.Add(this);
						this._ID_employee = value.ID;
					}
					else
					{
						this._ID_employee = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Days_Off")]
	public partial class Days_Off : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_days_off;
		
		private System.Nullable<int> _ID_employee;
		
		private string _Type_of_days_off;
		
		private System.Nullable<System.DateTime> _Begin_date;
		
		private System.Nullable<System.DateTime> _End_date;
		
		private string _State;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_days_offChanging(int value);
    partial void OnID_days_offChanged();
    partial void OnID_employeeChanging(System.Nullable<int> value);
    partial void OnID_employeeChanged();
    partial void OnType_of_days_offChanging(string value);
    partial void OnType_of_days_offChanged();
    partial void OnBegin_dateChanging(System.Nullable<System.DateTime> value);
    partial void OnBegin_dateChanged();
    partial void OnEnd_dateChanging(System.Nullable<System.DateTime> value);
    partial void OnEnd_dateChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    #endregion
		
		public Days_Off()
		{
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_days_off", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_days_off
		{
			get
			{
				return this._ID_days_off;
			}
			set
			{
				if ((this._ID_days_off != value))
				{
					this.OnID_days_offChanging(value);
					this.SendPropertyChanging();
					this._ID_days_off = value;
					this.SendPropertyChanged("ID_days_off");
					this.OnID_days_offChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_employee", DbType="Int")]
		public System.Nullable<int> ID_employee
		{
			get
			{
				return this._ID_employee;
			}
			set
			{
				if ((this._ID_employee != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_employeeChanging(value);
					this.SendPropertyChanging();
					this._ID_employee = value;
					this.SendPropertyChanged("ID_employee");
					this.OnID_employeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type_of_days_off", DbType="VarChar(20)")]
		public string Type_of_days_off
		{
			get
			{
				return this._Type_of_days_off;
			}
			set
			{
				if ((this._Type_of_days_off != value))
				{
					this.OnType_of_days_offChanging(value);
					this.SendPropertyChanging();
					this._Type_of_days_off = value;
					this.SendPropertyChanged("Type_of_days_off");
					this.OnType_of_days_offChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Begin_date", DbType="Date")]
		public System.Nullable<System.DateTime> Begin_date
		{
			get
			{
				return this._Begin_date;
			}
			set
			{
				if ((this._Begin_date != value))
				{
					this.OnBegin_dateChanging(value);
					this.SendPropertyChanging();
					this._Begin_date = value;
					this.SendPropertyChanged("Begin_date");
					this.OnBegin_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_End_date", DbType="Date")]
		public System.Nullable<System.DateTime> End_date
		{
			get
			{
				return this._End_date;
			}
			set
			{
				if ((this._End_date != value))
				{
					this.OnEnd_dateChanging(value);
					this.SendPropertyChanging();
					this._End_date = value;
					this.SendPropertyChanged("End_date");
					this.OnEnd_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="VarChar(10)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Days_Off", Storage="_Employee", ThisKey="ID_employee", OtherKey="ID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Days_Offs.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Days_Offs.Add(this);
						this._ID_employee = value.ID;
					}
					else
					{
						this._ID_employee = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Department")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_department;
		
		private string _Nume;
		
		private string _Descriere;
		
		private EntitySet<Employee> _Employees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_departmentChanging(int value);
    partial void OnID_departmentChanged();
    partial void OnNumeChanging(string value);
    partial void OnNumeChanged();
    partial void OnDescriereChanging(string value);
    partial void OnDescriereChanged();
    #endregion
		
		public Department()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_department", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_department
		{
			get
			{
				return this._ID_department;
			}
			set
			{
				if ((this._ID_department != value))
				{
					this.OnID_departmentChanging(value);
					this.SendPropertyChanging();
					this._ID_department = value;
					this.SendPropertyChanged("ID_department");
					this.OnID_departmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nume", DbType="VarChar(50)")]
		public string Nume
		{
			get
			{
				return this._Nume;
			}
			set
			{
				if ((this._Nume != value))
				{
					this.OnNumeChanging(value);
					this.SendPropertyChanging();
					this._Nume = value;
					this.SendPropertyChanged("Nume");
					this.OnNumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Descriere", DbType="VarChar(250)")]
		public string Descriere
		{
			get
			{
				return this._Descriere;
			}
			set
			{
				if ((this._Descriere != value))
				{
					this.OnDescriereChanging(value);
					this.SendPropertyChanging();
					this._Descriere = value;
					this.SendPropertyChanged("Descriere");
					this.OnDescriereChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Employee", Storage="_Employees", ThisKey="ID_department", OtherKey="ID_department")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Last_name;
		
		private string _First_name;
		
		private string _CNP;
		
		private System.Nullable<System.DateTime> _Date_of_birth;
		
		private string _Home_address;
		
		private string _Phone_number;
		
		private string _Email;
		
		private System.Nullable<int> _ID_post;
		
		private System.Nullable<int> _ID_department;
		
		private System.Nullable<int> _Base_salary;
		
		private string _Status;
		
		private System.Nullable<int> _Contract_period;
		
		private string _Contract_type;
		
		private EntitySet<WorkFromHome> _WorkFromHomes;
		
		private EntitySet<Absence> _Absences;
		
		private EntitySet<Bonus> _Bonus;
		
		private EntitySet<BussinessTrip> _BussinessTrips;
		
		private EntitySet<Clocking> _Clockings;
		
		private EntitySet<Days_Off> _Days_Offs;
		
		private EntitySet<Evaluation> _Evaluations;
		
		private EntitySet<Evaluation> _Evaluations1;
		
		private EntitySet<Training_assignment> _Training_assignments;
		
		private EntitySet<User_employee> _User_employees;
		
		private EntitySet<Account> _Accounts;
		
		private EntityRef<Department> _Department;
		
		private EntityRef<Post> _Post;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLast_nameChanging(string value);
    partial void OnLast_nameChanged();
    partial void OnFirst_nameChanging(string value);
    partial void OnFirst_nameChanged();
    partial void OnCNPChanging(string value);
    partial void OnCNPChanged();
    partial void OnDate_of_birthChanging(System.Nullable<System.DateTime> value);
    partial void OnDate_of_birthChanged();
    partial void OnHome_addressChanging(string value);
    partial void OnHome_addressChanged();
    partial void OnPhone_numberChanging(string value);
    partial void OnPhone_numberChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnID_postChanging(System.Nullable<int> value);
    partial void OnID_postChanged();
    partial void OnID_departmentChanging(System.Nullable<int> value);
    partial void OnID_departmentChanged();
    partial void OnBase_salaryChanging(System.Nullable<int> value);
    partial void OnBase_salaryChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnContract_periodChanging(System.Nullable<int> value);
    partial void OnContract_periodChanged();
    partial void OnContract_typeChanging(string value);
    partial void OnContract_typeChanged();
    #endregion
		
		public Employee()
		{
			this._WorkFromHomes = new EntitySet<WorkFromHome>(new Action<WorkFromHome>(this.attach_WorkFromHomes), new Action<WorkFromHome>(this.detach_WorkFromHomes));
			this._Absences = new EntitySet<Absence>(new Action<Absence>(this.attach_Absences), new Action<Absence>(this.detach_Absences));
			this._Bonus = new EntitySet<Bonus>(new Action<Bonus>(this.attach_Bonus), new Action<Bonus>(this.detach_Bonus));
			this._BussinessTrips = new EntitySet<BussinessTrip>(new Action<BussinessTrip>(this.attach_BussinessTrips), new Action<BussinessTrip>(this.detach_BussinessTrips));
			this._Clockings = new EntitySet<Clocking>(new Action<Clocking>(this.attach_Clockings), new Action<Clocking>(this.detach_Clockings));
			this._Days_Offs = new EntitySet<Days_Off>(new Action<Days_Off>(this.attach_Days_Offs), new Action<Days_Off>(this.detach_Days_Offs));
			this._Evaluations = new EntitySet<Evaluation>(new Action<Evaluation>(this.attach_Evaluations), new Action<Evaluation>(this.detach_Evaluations));
			this._Evaluations1 = new EntitySet<Evaluation>(new Action<Evaluation>(this.attach_Evaluations1), new Action<Evaluation>(this.detach_Evaluations1));
			this._Training_assignments = new EntitySet<Training_assignment>(new Action<Training_assignment>(this.attach_Training_assignments), new Action<Training_assignment>(this.detach_Training_assignments));
			this._User_employees = new EntitySet<User_employee>(new Action<User_employee>(this.attach_User_employees), new Action<User_employee>(this.detach_User_employees));
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			this._Department = default(EntityRef<Department>);
			this._Post = default(EntityRef<Post>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_name", DbType="VarChar(50)")]
		public string Last_name
		{
			get
			{
				return this._Last_name;
			}
			set
			{
				if ((this._Last_name != value))
				{
					this.OnLast_nameChanging(value);
					this.SendPropertyChanging();
					this._Last_name = value;
					this.SendPropertyChanged("Last_name");
					this.OnLast_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_First_name", DbType="VarChar(50)")]
		public string First_name
		{
			get
			{
				return this._First_name;
			}
			set
			{
				if ((this._First_name != value))
				{
					this.OnFirst_nameChanging(value);
					this.SendPropertyChanging();
					this._First_name = value;
					this.SendPropertyChanged("First_name");
					this.OnFirst_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CNP", DbType="Char(13)")]
		public string CNP
		{
			get
			{
				return this._CNP;
			}
			set
			{
				if ((this._CNP != value))
				{
					this.OnCNPChanging(value);
					this.SendPropertyChanging();
					this._CNP = value;
					this.SendPropertyChanged("CNP");
					this.OnCNPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date_of_birth", DbType="Date")]
		public System.Nullable<System.DateTime> Date_of_birth
		{
			get
			{
				return this._Date_of_birth;
			}
			set
			{
				if ((this._Date_of_birth != value))
				{
					this.OnDate_of_birthChanging(value);
					this.SendPropertyChanging();
					this._Date_of_birth = value;
					this.SendPropertyChanged("Date_of_birth");
					this.OnDate_of_birthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Home_address", DbType="VarChar(150)")]
		public string Home_address
		{
			get
			{
				return this._Home_address;
			}
			set
			{
				if ((this._Home_address != value))
				{
					this.OnHome_addressChanging(value);
					this.SendPropertyChanging();
					this._Home_address = value;
					this.SendPropertyChanged("Home_address");
					this.OnHome_addressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone_number", DbType="VarChar(13)")]
		public string Phone_number
		{
			get
			{
				return this._Phone_number;
			}
			set
			{
				if ((this._Phone_number != value))
				{
					this.OnPhone_numberChanging(value);
					this.SendPropertyChanging();
					this._Phone_number = value;
					this.SendPropertyChanged("Phone_number");
					this.OnPhone_numberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_post", DbType="Int")]
		public System.Nullable<int> ID_post
		{
			get
			{
				return this._ID_post;
			}
			set
			{
				if ((this._ID_post != value))
				{
					if (this._Post.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_postChanging(value);
					this.SendPropertyChanging();
					this._ID_post = value;
					this.SendPropertyChanged("ID_post");
					this.OnID_postChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_department", DbType="Int")]
		public System.Nullable<int> ID_department
		{
			get
			{
				return this._ID_department;
			}
			set
			{
				if ((this._ID_department != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_departmentChanging(value);
					this.SendPropertyChanging();
					this._ID_department = value;
					this.SendPropertyChanged("ID_department");
					this.OnID_departmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Base_salary", DbType="Int")]
		public System.Nullable<int> Base_salary
		{
			get
			{
				return this._Base_salary;
			}
			set
			{
				if ((this._Base_salary != value))
				{
					this.OnBase_salaryChanging(value);
					this.SendPropertyChanging();
					this._Base_salary = value;
					this.SendPropertyChanged("Base_salary");
					this.OnBase_salaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(10)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contract_period", DbType="Int")]
		public System.Nullable<int> Contract_period
		{
			get
			{
				return this._Contract_period;
			}
			set
			{
				if ((this._Contract_period != value))
				{
					this.OnContract_periodChanging(value);
					this.SendPropertyChanging();
					this._Contract_period = value;
					this.SendPropertyChanged("Contract_period");
					this.OnContract_periodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contract_type", DbType="VarChar(10)")]
		public string Contract_type
		{
			get
			{
				return this._Contract_type;
			}
			set
			{
				if ((this._Contract_type != value))
				{
					this.OnContract_typeChanging(value);
					this.SendPropertyChanging();
					this._Contract_type = value;
					this.SendPropertyChanged("Contract_type");
					this.OnContract_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_WorkFromHome", Storage="_WorkFromHomes", ThisKey="ID", OtherKey="ID_employee")]
		public EntitySet<WorkFromHome> WorkFromHomes
		{
			get
			{
				return this._WorkFromHomes;
			}
			set
			{
				this._WorkFromHomes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Absence", Storage="_Absences", ThisKey="ID", OtherKey="ID_employee")]
		public EntitySet<Absence> Absences
		{
			get
			{
				return this._Absences;
			}
			set
			{
				this._Absences.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Bonus", Storage="_Bonus", ThisKey="ID", OtherKey="ID_employee")]
		public EntitySet<Bonus> Bonus
		{
			get
			{
				return this._Bonus;
			}
			set
			{
				this._Bonus.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_BussinessTrip", Storage="_BussinessTrips", ThisKey="ID", OtherKey="ID_employee")]
		public EntitySet<BussinessTrip> BussinessTrips
		{
			get
			{
				return this._BussinessTrips;
			}
			set
			{
				this._BussinessTrips.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Clocking", Storage="_Clockings", ThisKey="ID", OtherKey="ID_employee")]
		public EntitySet<Clocking> Clockings
		{
			get
			{
				return this._Clockings;
			}
			set
			{
				this._Clockings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Days_Off", Storage="_Days_Offs", ThisKey="ID", OtherKey="ID_employee")]
		public EntitySet<Days_Off> Days_Offs
		{
			get
			{
				return this._Days_Offs;
			}
			set
			{
				this._Days_Offs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Evaluation", Storage="_Evaluations", ThisKey="ID", OtherKey="ID_employee")]
		public EntitySet<Evaluation> Evaluations
		{
			get
			{
				return this._Evaluations;
			}
			set
			{
				this._Evaluations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Evaluation1", Storage="_Evaluations1", ThisKey="ID", OtherKey="ID_manager")]
		public EntitySet<Evaluation> Evaluations1
		{
			get
			{
				return this._Evaluations1;
			}
			set
			{
				this._Evaluations1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Training_assignment", Storage="_Training_assignments", ThisKey="ID", OtherKey="ID_employee")]
		public EntitySet<Training_assignment> Training_assignments
		{
			get
			{
				return this._Training_assignments;
			}
			set
			{
				this._Training_assignments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_User_employee", Storage="_User_employees", ThisKey="ID", OtherKey="ID_employee")]
		public EntitySet<User_employee> User_employees
		{
			get
			{
				return this._User_employees;
			}
			set
			{
				this._User_employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Account", Storage="_Accounts", ThisKey="ID", OtherKey="EmployeeID")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_Employee", Storage="_Department", ThisKey="ID_department", OtherKey="ID_department", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._ID_department = value.ID_department;
					}
					else
					{
						this._ID_department = default(Nullable<int>);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Post_Employee", Storage="_Post", ThisKey="ID_post", OtherKey="ID_post", IsForeignKey=true)]
		public Post Post
		{
			get
			{
				return this._Post.Entity;
			}
			set
			{
				Post previousValue = this._Post.Entity;
				if (((previousValue != value) 
							|| (this._Post.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Post.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Post.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._ID_post = value.ID_post;
					}
					else
					{
						this._ID_post = default(Nullable<int>);
					}
					this.SendPropertyChanged("Post");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WorkFromHomes(WorkFromHome entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_WorkFromHomes(WorkFromHome entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Absences(Absence entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Absences(Absence entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Bonus(Bonus entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Bonus(Bonus entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_BussinessTrips(BussinessTrip entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_BussinessTrips(BussinessTrip entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Clockings(Clocking entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Clockings(Clocking entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Days_Offs(Days_Off entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Days_Offs(Days_Off entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Evaluations(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Evaluations(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Evaluations1(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = this;
		}
		
		private void detach_Evaluations1(Evaluation entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = null;
		}
		
		private void attach_Training_assignments(Training_assignment entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Training_assignments(Training_assignment entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_User_employees(User_employee entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_User_employees(User_employee entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Evaluation")]
	public partial class Evaluation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _ID_employee;
		
		private System.Nullable<System.DateTime> _Date_of_evaluation;
		
		private System.Nullable<System.DateTime> _Start_date_of_evaluation;
		
		private System.Nullable<System.DateTime> _End_date_of_evaluation;
		
		private System.Nullable<int> _Scor;
		
		private string _Feedback;
		
		private string _Future_objectives;
		
		private System.Nullable<int> _ID_manager;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Employee> _Employee1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnID_employeeChanging(System.Nullable<int> value);
    partial void OnID_employeeChanged();
    partial void OnDate_of_evaluationChanging(System.Nullable<System.DateTime> value);
    partial void OnDate_of_evaluationChanged();
    partial void OnStart_date_of_evaluationChanging(System.Nullable<System.DateTime> value);
    partial void OnStart_date_of_evaluationChanged();
    partial void OnEnd_date_of_evaluationChanging(System.Nullable<System.DateTime> value);
    partial void OnEnd_date_of_evaluationChanged();
    partial void OnScorChanging(System.Nullable<int> value);
    partial void OnScorChanged();
    partial void OnFeedbackChanging(string value);
    partial void OnFeedbackChanged();
    partial void OnFuture_objectivesChanging(string value);
    partial void OnFuture_objectivesChanged();
    partial void OnID_managerChanging(System.Nullable<int> value);
    partial void OnID_managerChanged();
    #endregion
		
		public Evaluation()
		{
			this._Employee = default(EntityRef<Employee>);
			this._Employee1 = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_employee", DbType="Int")]
		public System.Nullable<int> ID_employee
		{
			get
			{
				return this._ID_employee;
			}
			set
			{
				if ((this._ID_employee != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_employeeChanging(value);
					this.SendPropertyChanging();
					this._ID_employee = value;
					this.SendPropertyChanged("ID_employee");
					this.OnID_employeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date_of_evaluation", DbType="Date")]
		public System.Nullable<System.DateTime> Date_of_evaluation
		{
			get
			{
				return this._Date_of_evaluation;
			}
			set
			{
				if ((this._Date_of_evaluation != value))
				{
					this.OnDate_of_evaluationChanging(value);
					this.SendPropertyChanging();
					this._Date_of_evaluation = value;
					this.SendPropertyChanged("Date_of_evaluation");
					this.OnDate_of_evaluationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Start_date_of_evaluation", DbType="Date")]
		public System.Nullable<System.DateTime> Start_date_of_evaluation
		{
			get
			{
				return this._Start_date_of_evaluation;
			}
			set
			{
				if ((this._Start_date_of_evaluation != value))
				{
					this.OnStart_date_of_evaluationChanging(value);
					this.SendPropertyChanging();
					this._Start_date_of_evaluation = value;
					this.SendPropertyChanged("Start_date_of_evaluation");
					this.OnStart_date_of_evaluationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_End_date_of_evaluation", DbType="Date")]
		public System.Nullable<System.DateTime> End_date_of_evaluation
		{
			get
			{
				return this._End_date_of_evaluation;
			}
			set
			{
				if ((this._End_date_of_evaluation != value))
				{
					this.OnEnd_date_of_evaluationChanging(value);
					this.SendPropertyChanging();
					this._End_date_of_evaluation = value;
					this.SendPropertyChanged("End_date_of_evaluation");
					this.OnEnd_date_of_evaluationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Scor", DbType="Int")]
		public System.Nullable<int> Scor
		{
			get
			{
				return this._Scor;
			}
			set
			{
				if ((this._Scor != value))
				{
					this.OnScorChanging(value);
					this.SendPropertyChanging();
					this._Scor = value;
					this.SendPropertyChanged("Scor");
					this.OnScorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Feedback", DbType="VarChar(500)")]
		public string Feedback
		{
			get
			{
				return this._Feedback;
			}
			set
			{
				if ((this._Feedback != value))
				{
					this.OnFeedbackChanging(value);
					this.SendPropertyChanging();
					this._Feedback = value;
					this.SendPropertyChanged("Feedback");
					this.OnFeedbackChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Future_objectives", DbType="VarChar(200)")]
		public string Future_objectives
		{
			get
			{
				return this._Future_objectives;
			}
			set
			{
				if ((this._Future_objectives != value))
				{
					this.OnFuture_objectivesChanging(value);
					this.SendPropertyChanging();
					this._Future_objectives = value;
					this.SendPropertyChanged("Future_objectives");
					this.OnFuture_objectivesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_manager", DbType="Int")]
		public System.Nullable<int> ID_manager
		{
			get
			{
				return this._ID_manager;
			}
			set
			{
				if ((this._ID_manager != value))
				{
					if (this._Employee1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_managerChanging(value);
					this.SendPropertyChanging();
					this._ID_manager = value;
					this.SendPropertyChanged("ID_manager");
					this.OnID_managerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Evaluation", Storage="_Employee", ThisKey="ID_employee", OtherKey="ID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Evaluations.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Evaluations.Add(this);
						this._ID_employee = value.ID;
					}
					else
					{
						this._ID_employee = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Evaluation1", Storage="_Employee1", ThisKey="ID_manager", OtherKey="ID", IsForeignKey=true)]
		public Employee Employee1
		{
			get
			{
				return this._Employee1.Entity;
			}
			set
			{
				Employee previousValue = this._Employee1.Entity;
				if (((previousValue != value) 
							|| (this._Employee1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee1.Entity = null;
						previousValue.Evaluations1.Remove(this);
					}
					this._Employee1.Entity = value;
					if ((value != null))
					{
						value.Evaluations1.Add(this);
						this._ID_manager = value.ID;
					}
					else
					{
						this._ID_manager = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Post")]
	public partial class Post : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_post;
		
		private string _Nume;
		
		private string _Descriere;
		
		private System.Nullable<int> _Level_of_importance;
		
		private EntitySet<Employee> _Employees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_postChanging(int value);
    partial void OnID_postChanged();
    partial void OnNumeChanging(string value);
    partial void OnNumeChanged();
    partial void OnDescriereChanging(string value);
    partial void OnDescriereChanged();
    partial void OnLevel_of_importanceChanging(System.Nullable<int> value);
    partial void OnLevel_of_importanceChanged();
    #endregion
		
		public Post()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_post", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_post
		{
			get
			{
				return this._ID_post;
			}
			set
			{
				if ((this._ID_post != value))
				{
					this.OnID_postChanging(value);
					this.SendPropertyChanging();
					this._ID_post = value;
					this.SendPropertyChanged("ID_post");
					this.OnID_postChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nume", DbType="VarChar(50)")]
		public string Nume
		{
			get
			{
				return this._Nume;
			}
			set
			{
				if ((this._Nume != value))
				{
					this.OnNumeChanging(value);
					this.SendPropertyChanging();
					this._Nume = value;
					this.SendPropertyChanged("Nume");
					this.OnNumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Descriere", DbType="VarChar(250)")]
		public string Descriere
		{
			get
			{
				return this._Descriere;
			}
			set
			{
				if ((this._Descriere != value))
				{
					this.OnDescriereChanging(value);
					this.SendPropertyChanging();
					this._Descriere = value;
					this.SendPropertyChanged("Descriere");
					this.OnDescriereChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Level_of_importance", DbType="Int")]
		public System.Nullable<int> Level_of_importance
		{
			get
			{
				return this._Level_of_importance;
			}
			set
			{
				if ((this._Level_of_importance != value))
				{
					this.OnLevel_of_importanceChanging(value);
					this.SendPropertyChanging();
					this._Level_of_importance = value;
					this.SendPropertyChanged("Level_of_importance");
					this.OnLevel_of_importanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Post_Employee", Storage="_Employees", ThisKey="ID_post", OtherKey="ID_post")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Post = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Post = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _Level_of_importance;
		
		private string _Permissions;
		
		private string _Description;
		
		private EntitySet<User_employee> _User_employees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLevel_of_importanceChanging(System.Nullable<int> value);
    partial void OnLevel_of_importanceChanged();
    partial void OnPermissionsChanging(string value);
    partial void OnPermissionsChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Role()
		{
			this._User_employees = new EntitySet<User_employee>(new Action<User_employee>(this.attach_User_employees), new Action<User_employee>(this.detach_User_employees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Level_of_importance", DbType="Int")]
		public System.Nullable<int> Level_of_importance
		{
			get
			{
				return this._Level_of_importance;
			}
			set
			{
				if ((this._Level_of_importance != value))
				{
					this.OnLevel_of_importanceChanging(value);
					this.SendPropertyChanging();
					this._Level_of_importance = value;
					this.SendPropertyChanged("Level_of_importance");
					this.OnLevel_of_importanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Permissions", DbType="VarChar(300)")]
		public string Permissions
		{
			get
			{
				return this._Permissions;
			}
			set
			{
				if ((this._Permissions != value))
				{
					this.OnPermissionsChanging(value);
					this.SendPropertyChanging();
					this._Permissions = value;
					this.SendPropertyChanged("Permissions");
					this.OnPermissionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(300)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User_employee", Storage="_User_employees", ThisKey="ID", OtherKey="ID_role")]
		public EntitySet<User_employee> User_employees
		{
			get
			{
				return this._User_employees;
			}
			set
			{
				this._User_employees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_User_employees(User_employee entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_User_employees(User_employee entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Training")]
	public partial class Training : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Training_name;
		
		private string _Description;
		
		private System.Nullable<System.DateTime> _Begin_date;
		
		private System.Nullable<System.DateTime> _End_date;
		
		private EntitySet<Training_assignment> _Training_assignments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTraining_nameChanging(string value);
    partial void OnTraining_nameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnBegin_dateChanging(System.Nullable<System.DateTime> value);
    partial void OnBegin_dateChanged();
    partial void OnEnd_dateChanging(System.Nullable<System.DateTime> value);
    partial void OnEnd_dateChanged();
    #endregion
		
		public Training()
		{
			this._Training_assignments = new EntitySet<Training_assignment>(new Action<Training_assignment>(this.attach_Training_assignments), new Action<Training_assignment>(this.detach_Training_assignments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Training_name", DbType="VarChar(50)")]
		public string Training_name
		{
			get
			{
				return this._Training_name;
			}
			set
			{
				if ((this._Training_name != value))
				{
					this.OnTraining_nameChanging(value);
					this.SendPropertyChanging();
					this._Training_name = value;
					this.SendPropertyChanged("Training_name");
					this.OnTraining_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Begin_date", DbType="Date")]
		public System.Nullable<System.DateTime> Begin_date
		{
			get
			{
				return this._Begin_date;
			}
			set
			{
				if ((this._Begin_date != value))
				{
					this.OnBegin_dateChanging(value);
					this.SendPropertyChanging();
					this._Begin_date = value;
					this.SendPropertyChanged("Begin_date");
					this.OnBegin_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_End_date", DbType="Date")]
		public System.Nullable<System.DateTime> End_date
		{
			get
			{
				return this._End_date;
			}
			set
			{
				if ((this._End_date != value))
				{
					this.OnEnd_dateChanging(value);
					this.SendPropertyChanging();
					this._End_date = value;
					this.SendPropertyChanged("End_date");
					this.OnEnd_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Training_Training_assignment", Storage="_Training_assignments", ThisKey="ID", OtherKey="ID_training")]
		public EntitySet<Training_assignment> Training_assignments
		{
			get
			{
				return this._Training_assignments;
			}
			set
			{
				this._Training_assignments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Training_assignments(Training_assignment entity)
		{
			this.SendPropertyChanging();
			entity.Training = this;
		}
		
		private void detach_Training_assignments(Training_assignment entity)
		{
			this.SendPropertyChanging();
			entity.Training = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Training_assignment")]
	public partial class Training_assignment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _ID_employee;
		
		private System.Nullable<int> _ID_training;
		
		private string _Status;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Training> _Training;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnID_employeeChanging(System.Nullable<int> value);
    partial void OnID_employeeChanged();
    partial void OnID_trainingChanging(System.Nullable<int> value);
    partial void OnID_trainingChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public Training_assignment()
		{
			this._Employee = default(EntityRef<Employee>);
			this._Training = default(EntityRef<Training>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_employee", DbType="Int")]
		public System.Nullable<int> ID_employee
		{
			get
			{
				return this._ID_employee;
			}
			set
			{
				if ((this._ID_employee != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_employeeChanging(value);
					this.SendPropertyChanging();
					this._ID_employee = value;
					this.SendPropertyChanged("ID_employee");
					this.OnID_employeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_training", DbType="Int")]
		public System.Nullable<int> ID_training
		{
			get
			{
				return this._ID_training;
			}
			set
			{
				if ((this._ID_training != value))
				{
					if (this._Training.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_trainingChanging(value);
					this.SendPropertyChanging();
					this._ID_training = value;
					this.SendPropertyChanged("ID_training");
					this.OnID_trainingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(15)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Training_assignment", Storage="_Employee", ThisKey="ID_employee", OtherKey="ID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Training_assignments.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Training_assignments.Add(this);
						this._ID_employee = value.ID;
					}
					else
					{
						this._ID_employee = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Training_Training_assignment", Storage="_Training", ThisKey="ID_training", OtherKey="ID", IsForeignKey=true)]
		public Training Training
		{
			get
			{
				return this._Training.Entity;
			}
			set
			{
				Training previousValue = this._Training.Entity;
				if (((previousValue != value) 
							|| (this._Training.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Training.Entity = null;
						previousValue.Training_assignments.Remove(this);
					}
					this._Training.Entity = value;
					if ((value != null))
					{
						value.Training_assignments.Add(this);
						this._ID_training = value.ID;
					}
					else
					{
						this._ID_training = default(Nullable<int>);
					}
					this.SendPropertyChanged("Training");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.User_employee")]
	public partial class User_employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _ID_employee;
		
		private string _Username;
		
		private string _Password;
		
		private System.Nullable<int> _ID_role;
		
		private System.Nullable<System.DateTime> _Last_authentification;
		
		private string _Status;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnID_employeeChanging(System.Nullable<int> value);
    partial void OnID_employeeChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnID_roleChanging(System.Nullable<int> value);
    partial void OnID_roleChanged();
    partial void OnLast_authentificationChanging(System.Nullable<System.DateTime> value);
    partial void OnLast_authentificationChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public User_employee()
		{
			this._Employee = default(EntityRef<Employee>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_employee", DbType="Int")]
		public System.Nullable<int> ID_employee
		{
			get
			{
				return this._ID_employee;
			}
			set
			{
				if ((this._ID_employee != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_employeeChanging(value);
					this.SendPropertyChanging();
					this._ID_employee = value;
					this.SendPropertyChanged("ID_employee");
					this.OnID_employeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(100)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(100)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_role", DbType="Int")]
		public System.Nullable<int> ID_role
		{
			get
			{
				return this._ID_role;
			}
			set
			{
				if ((this._ID_role != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_roleChanging(value);
					this.SendPropertyChanging();
					this._ID_role = value;
					this.SendPropertyChanged("ID_role");
					this.OnID_roleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_authentification", DbType="Date")]
		public System.Nullable<System.DateTime> Last_authentification
		{
			get
			{
				return this._Last_authentification;
			}
			set
			{
				if ((this._Last_authentification != value))
				{
					this.OnLast_authentificationChanging(value);
					this.SendPropertyChanging();
					this._Last_authentification = value;
					this.SendPropertyChanged("Last_authentification");
					this.OnLast_authentificationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(15)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_User_employee", Storage="_Employee", ThisKey="ID_employee", OtherKey="ID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.User_employees.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.User_employees.Add(this);
						this._ID_employee = value.ID;
					}
					else
					{
						this._ID_employee = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User_employee", Storage="_Role", ThisKey="ID_role", OtherKey="ID", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.User_employees.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.User_employees.Add(this);
						this._ID_role = value.ID;
					}
					else
					{
						this._ID_role = default(Nullable<int>);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Accounts")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccountID;
		
		private int _EmployeeID;
		
		private string _Username;
		
		private string _Password;
		
		private EntityRef<Employee> _Employee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountIDChanging(int value);
    partial void OnAccountIDChanged();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public Account()
		{
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Account", Storage="_Employee", ThisKey="EmployeeID", OtherKey="ID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._EmployeeID = value.ID;
					}
					else
					{
						this._EmployeeID = default(int);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
